// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "messages.g.h"

struct _QuantumMessageData {
  GObject parent_instance;

  gchar* name;
  gchar* description;
  FlValue* data;
};

G_DEFINE_TYPE(QuantumMessageData, quantum_message_data, G_TYPE_OBJECT)

static void quantum_message_data_dispose(GObject* object) {
  QuantumMessageData* self = QUANTUM_MESSAGE_DATA(object);
  g_clear_pointer(&self->name, g_free);
  g_clear_pointer(&self->description, g_free);
  g_clear_pointer(&self->data, fl_value_unref);
  G_OBJECT_CLASS(quantum_message_data_parent_class)->dispose(object);
}

static void quantum_message_data_init(QuantumMessageData* self) {
}

static void quantum_message_data_class_init(QuantumMessageDataClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_message_data_dispose;
}

QuantumMessageData* quantum_message_data_new(const gchar* name, const gchar* description, FlValue* data) {
  QuantumMessageData* self = QUANTUM_MESSAGE_DATA(g_object_new(quantum_message_data_get_type(), nullptr));
  if (name != nullptr) {
    self->name = g_strdup(name);
  }
  else {
    self->name = nullptr;
  }
  if (description != nullptr) {
    self->description = g_strdup(description);
  }
  else {
    self->description = nullptr;
  }
  self->data = fl_value_ref(data);
  return self;
}

const gchar* quantum_message_data_get_name(QuantumMessageData* self) {
  g_return_val_if_fail(QUANTUM_IS_MESSAGE_DATA(self), nullptr);
  return self->name;
}

const gchar* quantum_message_data_get_description(QuantumMessageData* self) {
  g_return_val_if_fail(QUANTUM_IS_MESSAGE_DATA(self), nullptr);
  return self->description;
}

FlValue* quantum_message_data_get_data(QuantumMessageData* self) {
  g_return_val_if_fail(QUANTUM_IS_MESSAGE_DATA(self), nullptr);
  return self->data;
}

static FlValue* quantum_message_data_to_list(QuantumMessageData* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->name != nullptr ? fl_value_new_string(self->name) : fl_value_new_null());
  fl_value_append_take(values, self->description != nullptr ? fl_value_new_string(self->description) : fl_value_new_null());
  fl_value_append_take(values, fl_value_ref(self->data));
  return values;
}

static QuantumMessageData* quantum_message_data_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  const gchar* name = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    name = fl_value_get_string(value0);
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  const gchar* description = nullptr;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    description = fl_value_get_string(value1);
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  FlValue* data = value2;
  return quantum_message_data_new(name, description, data);
}

struct _QuantumDirectoryResponse {
  GObject parent_instance;

  gchar* absolute_url;
  gchar* bookmark_string;
};

G_DEFINE_TYPE(QuantumDirectoryResponse, quantum_directory_response, G_TYPE_OBJECT)

static void quantum_directory_response_dispose(GObject* object) {
  QuantumDirectoryResponse* self = QUANTUM_DIRECTORY_RESPONSE(object);
  g_clear_pointer(&self->absolute_url, g_free);
  g_clear_pointer(&self->bookmark_string, g_free);
  G_OBJECT_CLASS(quantum_directory_response_parent_class)->dispose(object);
}

static void quantum_directory_response_init(QuantumDirectoryResponse* self) {
}

static void quantum_directory_response_class_init(QuantumDirectoryResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_directory_response_dispose;
}

QuantumDirectoryResponse* quantum_directory_response_new(const gchar* absolute_url, const gchar* bookmark_string) {
  QuantumDirectoryResponse* self = QUANTUM_DIRECTORY_RESPONSE(g_object_new(quantum_directory_response_get_type(), nullptr));
  if (absolute_url != nullptr) {
    self->absolute_url = g_strdup(absolute_url);
  }
  else {
    self->absolute_url = nullptr;
  }
  if (bookmark_string != nullptr) {
    self->bookmark_string = g_strdup(bookmark_string);
  }
  else {
    self->bookmark_string = nullptr;
  }
  return self;
}

const gchar* quantum_directory_response_get_absolute_url(QuantumDirectoryResponse* self) {
  g_return_val_if_fail(QUANTUM_IS_DIRECTORY_RESPONSE(self), nullptr);
  return self->absolute_url;
}

const gchar* quantum_directory_response_get_bookmark_string(QuantumDirectoryResponse* self) {
  g_return_val_if_fail(QUANTUM_IS_DIRECTORY_RESPONSE(self), nullptr);
  return self->bookmark_string;
}

static FlValue* quantum_directory_response_to_list(QuantumDirectoryResponse* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->absolute_url != nullptr ? fl_value_new_string(self->absolute_url) : fl_value_new_null());
  fl_value_append_take(values, self->bookmark_string != nullptr ? fl_value_new_string(self->bookmark_string) : fl_value_new_null());
  return values;
}

static QuantumDirectoryResponse* quantum_directory_response_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  const gchar* absolute_url = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    absolute_url = fl_value_get_string(value0);
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  const gchar* bookmark_string = nullptr;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    bookmark_string = fl_value_get_string(value1);
  }
  return quantum_directory_response_new(absolute_url, bookmark_string);
}

struct _QuantumMessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(QuantumMessageCodec, quantum_message_codec, fl_standard_message_codec_get_type())

static gboolean quantum_message_codec_write_quantum_message_data(FlStandardMessageCodec* codec, GByteArray* buffer, QuantumMessageData* value, GError** error) {
  uint8_t type = 129;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = quantum_message_data_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean quantum_message_codec_write_quantum_directory_response(FlStandardMessageCodec* codec, GByteArray* buffer, QuantumDirectoryResponse* value, GError** error) {
  uint8_t type = 130;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = quantum_directory_response_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean quantum_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case 129:
        return quantum_message_codec_write_quantum_message_data(codec, buffer, QUANTUM_MESSAGE_DATA(fl_value_get_custom_value_object(value)), error);
      case 130:
        return quantum_message_codec_write_quantum_directory_response(codec, buffer, QUANTUM_DIRECTORY_RESPONSE(fl_value_get_custom_value_object(value)), error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(quantum_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* quantum_message_codec_read_quantum_message_data(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(QuantumMessageData) value = quantum_message_data_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(129, G_OBJECT(value));
}

static FlValue* quantum_message_codec_read_quantum_directory_response(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, GError** error) {
  g_autoptr(FlValue) values = fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(QuantumDirectoryResponse) value = quantum_directory_response_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED, "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(130, G_OBJECT(value));
}

static FlValue* quantum_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    case 129:
      return quantum_message_codec_read_quantum_message_data(codec, buffer, offset, error);
    case 130:
      return quantum_message_codec_read_quantum_directory_response(codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(quantum_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void quantum_message_codec_init(QuantumMessageCodec* self) {
}

static void quantum_message_codec_class_init(QuantumMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = quantum_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = quantum_message_codec_read_value_of_type;
}

static QuantumMessageCodec* quantum_message_codec_new() {
  QuantumMessageCodec* self = QUANTUM_MESSAGE_CODEC(g_object_new(quantum_message_codec_get_type(), nullptr));
  return self;
}

struct _QuantumQuantumHostApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(QuantumQuantumHostApiResponseHandle, quantum_quantum_host_api_response_handle, G_TYPE_OBJECT)

static void quantum_quantum_host_api_response_handle_dispose(GObject* object) {
  QuantumQuantumHostApiResponseHandle* self = QUANTUM_QUANTUM_HOST_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(quantum_quantum_host_api_response_handle_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_response_handle_init(QuantumQuantumHostApiResponseHandle* self) {
}

static void quantum_quantum_host_api_response_handle_class_init(QuantumQuantumHostApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_response_handle_dispose;
}

static QuantumQuantumHostApiResponseHandle* quantum_quantum_host_api_response_handle_new(FlBasicMessageChannel* channel, FlBasicMessageChannelResponseHandle* response_handle) {
  QuantumQuantumHostApiResponseHandle* self = QUANTUM_QUANTUM_HOST_API_RESPONSE_HANDLE(g_object_new(quantum_quantum_host_api_response_handle_get_type(), nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle = FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

struct _QuantumQuantumHostApiGetHostLanguageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(QuantumQuantumHostApiGetHostLanguageResponse, quantum_quantum_host_api_get_host_language_response, G_TYPE_OBJECT)

static void quantum_quantum_host_api_get_host_language_response_dispose(GObject* object) {
  QuantumQuantumHostApiGetHostLanguageResponse* self = QUANTUM_QUANTUM_HOST_API_GET_HOST_LANGUAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(quantum_quantum_host_api_get_host_language_response_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_get_host_language_response_init(QuantumQuantumHostApiGetHostLanguageResponse* self) {
}

static void quantum_quantum_host_api_get_host_language_response_class_init(QuantumQuantumHostApiGetHostLanguageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_get_host_language_response_dispose;
}

QuantumQuantumHostApiGetHostLanguageResponse* quantum_quantum_host_api_get_host_language_response_new(const gchar* return_value) {
  QuantumQuantumHostApiGetHostLanguageResponse* self = QUANTUM_QUANTUM_HOST_API_GET_HOST_LANGUAGE_RESPONSE(g_object_new(quantum_quantum_host_api_get_host_language_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

QuantumQuantumHostApiGetHostLanguageResponse* quantum_quantum_host_api_get_host_language_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  QuantumQuantumHostApiGetHostLanguageResponse* self = QUANTUM_QUANTUM_HOST_API_GET_HOST_LANGUAGE_RESPONSE(g_object_new(quantum_quantum_host_api_get_host_language_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _QuantumQuantumHostApiChooseDirectoryResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(QuantumQuantumHostApiChooseDirectoryResponse, quantum_quantum_host_api_choose_directory_response, G_TYPE_OBJECT)

static void quantum_quantum_host_api_choose_directory_response_dispose(GObject* object) {
  QuantumQuantumHostApiChooseDirectoryResponse* self = QUANTUM_QUANTUM_HOST_API_CHOOSE_DIRECTORY_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(quantum_quantum_host_api_choose_directory_response_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_choose_directory_response_init(QuantumQuantumHostApiChooseDirectoryResponse* self) {
}

static void quantum_quantum_host_api_choose_directory_response_class_init(QuantumQuantumHostApiChooseDirectoryResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_choose_directory_response_dispose;
}

QuantumQuantumHostApiChooseDirectoryResponse* quantum_quantum_host_api_choose_directory_response_new(QuantumDirectoryResponse* return_value) {
  QuantumQuantumHostApiChooseDirectoryResponse* self = QUANTUM_QUANTUM_HOST_API_CHOOSE_DIRECTORY_RESPONSE(g_object_new(quantum_quantum_host_api_choose_directory_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr ? fl_value_new_custom_object(130, G_OBJECT(return_value)) : fl_value_new_null());
  return self;
}

QuantumQuantumHostApiChooseDirectoryResponse* quantum_quantum_host_api_choose_directory_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  QuantumQuantumHostApiChooseDirectoryResponse* self = QUANTUM_QUANTUM_HOST_API_CHOOSE_DIRECTORY_RESPONSE(g_object_new(quantum_quantum_host_api_choose_directory_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse, quantum_quantum_host_api_start_accessing_security_scoped_resource_response, G_TYPE_OBJECT)

static void quantum_quantum_host_api_start_accessing_security_scoped_resource_response_dispose(GObject* object) {
  QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* self = QUANTUM_QUANTUM_HOST_API_START_ACCESSING_SECURITY_SCOPED_RESOURCE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(quantum_quantum_host_api_start_accessing_security_scoped_resource_response_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_start_accessing_security_scoped_resource_response_init(QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* self) {
}

static void quantum_quantum_host_api_start_accessing_security_scoped_resource_response_class_init(QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_start_accessing_security_scoped_resource_response_dispose;
}

QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* quantum_quantum_host_api_start_accessing_security_scoped_resource_response_new(const gchar* return_value) {
  QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* self = QUANTUM_QUANTUM_HOST_API_START_ACCESSING_SECURITY_SCOPED_RESOURCE_RESPONSE(g_object_new(quantum_quantum_host_api_start_accessing_security_scoped_resource_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr ? fl_value_new_string(return_value) : fl_value_new_null());
  return self;
}

QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* quantum_quantum_host_api_start_accessing_security_scoped_resource_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* self = QUANTUM_QUANTUM_HOST_API_START_ACCESSING_SECURITY_SCOPED_RESOURCE_RESPONSE(g_object_new(quantum_quantum_host_api_start_accessing_security_scoped_resource_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _QuantumQuantumHostApiAddResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(QuantumQuantumHostApiAddResponse, quantum_quantum_host_api_add_response, G_TYPE_OBJECT)

static void quantum_quantum_host_api_add_response_dispose(GObject* object) {
  QuantumQuantumHostApiAddResponse* self = QUANTUM_QUANTUM_HOST_API_ADD_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(quantum_quantum_host_api_add_response_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_add_response_init(QuantumQuantumHostApiAddResponse* self) {
}

static void quantum_quantum_host_api_add_response_class_init(QuantumQuantumHostApiAddResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_add_response_dispose;
}

QuantumQuantumHostApiAddResponse* quantum_quantum_host_api_add_response_new(int64_t return_value) {
  QuantumQuantumHostApiAddResponse* self = QUANTUM_QUANTUM_HOST_API_ADD_RESPONSE(g_object_new(quantum_quantum_host_api_add_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

QuantumQuantumHostApiAddResponse* quantum_quantum_host_api_add_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  QuantumQuantumHostApiAddResponse* self = QUANTUM_QUANTUM_HOST_API_ADD_RESPONSE(g_object_new(quantum_quantum_host_api_add_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApiSendMessageResponse, quantum_quantum_host_api_send_message_response, QUANTUM, QUANTUM_HOST_API_SEND_MESSAGE_RESPONSE, GObject)

struct _QuantumQuantumHostApiSendMessageResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(QuantumQuantumHostApiSendMessageResponse, quantum_quantum_host_api_send_message_response, G_TYPE_OBJECT)

static void quantum_quantum_host_api_send_message_response_dispose(GObject* object) {
  QuantumQuantumHostApiSendMessageResponse* self = QUANTUM_QUANTUM_HOST_API_SEND_MESSAGE_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(quantum_quantum_host_api_send_message_response_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_send_message_response_init(QuantumQuantumHostApiSendMessageResponse* self) {
}

static void quantum_quantum_host_api_send_message_response_class_init(QuantumQuantumHostApiSendMessageResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_send_message_response_dispose;
}

static QuantumQuantumHostApiSendMessageResponse* quantum_quantum_host_api_send_message_response_new(gboolean return_value) {
  QuantumQuantumHostApiSendMessageResponse* self = QUANTUM_QUANTUM_HOST_API_SEND_MESSAGE_RESPONSE(g_object_new(quantum_quantum_host_api_send_message_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static QuantumQuantumHostApiSendMessageResponse* quantum_quantum_host_api_send_message_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  QuantumQuantumHostApiSendMessageResponse* self = QUANTUM_QUANTUM_HOST_API_SEND_MESSAGE_RESPONSE(g_object_new(quantum_quantum_host_api_send_message_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

struct _QuantumQuantumHostApi {
  GObject parent_instance;

  const QuantumQuantumHostApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(QuantumQuantumHostApi, quantum_quantum_host_api, G_TYPE_OBJECT)

static void quantum_quantum_host_api_dispose(GObject* object) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(quantum_quantum_host_api_parent_class)->dispose(object);
}

static void quantum_quantum_host_api_init(QuantumQuantumHostApi* self) {
}

static void quantum_quantum_host_api_class_init(QuantumQuantumHostApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = quantum_quantum_host_api_dispose;
}

static QuantumQuantumHostApi* quantum_quantum_host_api_new(const QuantumQuantumHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(g_object_new(quantum_quantum_host_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void quantum_quantum_host_api_get_host_language_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->get_host_language == nullptr) {
    return;
  }

  g_autoptr(QuantumQuantumHostApiGetHostLanguageResponse) response = self->vtable->get_host_language(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "QuantumHostApi", "getHostLanguage");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "QuantumHostApi", "getHostLanguage", error->message);
  }
}

static void quantum_quantum_host_api_choose_directory_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->choose_directory == nullptr) {
    return;
  }

  g_autoptr(QuantumQuantumHostApiChooseDirectoryResponse) response = self->vtable->choose_directory(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "QuantumHostApi", "chooseDirectory");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "QuantumHostApi", "chooseDirectory", error->message);
  }
}

static void quantum_quantum_host_api_start_accessing_security_scoped_resource_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->start_accessing_security_scoped_resource == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* bookmark_string = fl_value_get_string(value0);
  g_autoptr(QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse) response = self->vtable->start_accessing_security_scoped_resource(bookmark_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "QuantumHostApi", "startAccessingSecurityScopedResource");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "QuantumHostApi", "startAccessingSecurityScopedResource", error->message);
  }
}

static void quantum_quantum_host_api_add_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->add == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t a = fl_value_get_int(value0);
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t b = fl_value_get_int(value1);
  g_autoptr(QuantumQuantumHostApiAddResponse) response = self->vtable->add(a, b, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "QuantumHostApi", "add");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "QuantumHostApi", "add", error->message);
  }
}

static void quantum_quantum_host_api_send_message_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  QuantumQuantumHostApi* self = QUANTUM_QUANTUM_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->send_message == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  QuantumMessageData* message = QUANTUM_MESSAGE_DATA(fl_value_get_custom_value_object(value0));
  g_autoptr(QuantumQuantumHostApiResponseHandle) handle = quantum_quantum_host_api_response_handle_new(channel, response_handle);
  self->vtable->send_message(message, handle, self->user_data);
}

void quantum_quantum_host_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const QuantumQuantumHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(QuantumQuantumHostApi) api_data = quantum_quantum_host_api_new(vtable, user_data, user_data_free_func);

  g_autoptr(QuantumMessageCodec) codec = quantum_message_codec_new();
  g_autofree gchar* get_host_language_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.getHostLanguage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_host_language_channel = fl_basic_message_channel_new(messenger, get_host_language_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_host_language_channel, quantum_quantum_host_api_get_host_language_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* choose_directory_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.chooseDirectory%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) choose_directory_channel = fl_basic_message_channel_new(messenger, choose_directory_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(choose_directory_channel, quantum_quantum_host_api_choose_directory_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* start_accessing_security_scoped_resource_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.startAccessingSecurityScopedResource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) start_accessing_security_scoped_resource_channel = fl_basic_message_channel_new(messenger, start_accessing_security_scoped_resource_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(start_accessing_security_scoped_resource_channel, quantum_quantum_host_api_start_accessing_security_scoped_resource_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* add_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.add%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_channel = fl_basic_message_channel_new(messenger, add_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_channel, quantum_quantum_host_api_add_cb, g_object_ref(api_data), g_object_unref);
  g_autofree gchar* send_message_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.sendMessage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_message_channel = fl_basic_message_channel_new(messenger, send_message_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(send_message_channel, quantum_quantum_host_api_send_message_cb, g_object_ref(api_data), g_object_unref);
}

void quantum_quantum_host_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(QuantumMessageCodec) codec = quantum_message_codec_new();
  g_autofree gchar* get_host_language_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.getHostLanguage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_host_language_channel = fl_basic_message_channel_new(messenger, get_host_language_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_host_language_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* choose_directory_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.chooseDirectory%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) choose_directory_channel = fl_basic_message_channel_new(messenger, choose_directory_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(choose_directory_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* start_accessing_security_scoped_resource_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.startAccessingSecurityScopedResource%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) start_accessing_security_scoped_resource_channel = fl_basic_message_channel_new(messenger, start_accessing_security_scoped_resource_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(start_accessing_security_scoped_resource_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* add_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.add%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) add_channel = fl_basic_message_channel_new(messenger, add_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(add_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* send_message_channel_name = g_strdup_printf("dev.flutter.pigeon.quantum.QuantumHostApi.sendMessage%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_message_channel = fl_basic_message_channel_new(messenger, send_message_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(send_message_channel, nullptr, nullptr, nullptr);
}

void quantum_quantum_host_api_respond_send_message(QuantumQuantumHostApiResponseHandle* response_handle, gboolean return_value) {
  g_autoptr(QuantumQuantumHostApiSendMessageResponse) response = quantum_quantum_host_api_send_message_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "QuantumHostApi", "sendMessage", error->message);
  }
}

void quantum_quantum_host_api_respond_error_send_message(QuantumQuantumHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(QuantumQuantumHostApiSendMessageResponse) response = quantum_quantum_host_api_send_message_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "QuantumHostApi", "sendMessage", error->message);
  }
}
