// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_

#include <flutter_linux/flutter_linux.h>

G_BEGIN_DECLS

/**
 * QuantumDirectoryResponse:
 *
 */

G_DECLARE_FINAL_TYPE(QuantumDirectoryResponse, quantum_directory_response, QUANTUM, DIRECTORY_RESPONSE, GObject)

/**
 * quantum_directory_response_new:
 * absolute_url: field in this object.
 * bookmark_string: field in this object.
 *
 * Creates a new #DirectoryResponse object.
 *
 * Returns: a new #QuantumDirectoryResponse
 */
QuantumDirectoryResponse* quantum_directory_response_new(const gchar* absolute_url, const gchar* bookmark_string);

/**
 * quantum_directory_response_get_absolute_url
 * @object: a #QuantumDirectoryResponse.
 *
 * Gets the value of the absoluteUrl field of @object.
 *
 * Returns: the field value.
 */
const gchar* quantum_directory_response_get_absolute_url(QuantumDirectoryResponse* object);

/**
 * quantum_directory_response_get_bookmark_string
 * @object: a #QuantumDirectoryResponse.
 *
 * Gets the value of the bookmarkString field of @object.
 *
 * Returns: the field value.
 */
const gchar* quantum_directory_response_get_bookmark_string(QuantumDirectoryResponse* object);

G_DECLARE_FINAL_TYPE(QuantumMessageCodec, quantum_message_codec, QUANTUM, MESSAGE_CODEC, FlStandardMessageCodec)

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApi, quantum_quantum_host_api, QUANTUM, QUANTUM_HOST_API, GObject)

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApiResponseHandle, quantum_quantum_host_api_response_handle, QUANTUM, QUANTUM_HOST_API_RESPONSE_HANDLE, GObject)

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApiGetHostLanguageResponse, quantum_quantum_host_api_get_host_language_response, QUANTUM, QUANTUM_HOST_API_GET_HOST_LANGUAGE_RESPONSE, GObject)

/**
 * quantum_quantum_host_api_get_host_language_response_new:
 *
 * Creates a new response to QuantumHostApi.getHostLanguage.
 *
 * Returns: a new #QuantumQuantumHostApiGetHostLanguageResponse
 */
QuantumQuantumHostApiGetHostLanguageResponse* quantum_quantum_host_api_get_host_language_response_new(const gchar* return_value);

/**
 * quantum_quantum_host_api_get_host_language_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to QuantumHostApi.getHostLanguage.
 *
 * Returns: a new #QuantumQuantumHostApiGetHostLanguageResponse
 */
QuantumQuantumHostApiGetHostLanguageResponse* quantum_quantum_host_api_get_host_language_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApiChooseDirectoryResponse, quantum_quantum_host_api_choose_directory_response, QUANTUM, QUANTUM_HOST_API_CHOOSE_DIRECTORY_RESPONSE, GObject)

/**
 * quantum_quantum_host_api_choose_directory_response_new:
 *
 * Creates a new response to QuantumHostApi.chooseDirectory.
 *
 * Returns: a new #QuantumQuantumHostApiChooseDirectoryResponse
 */
QuantumQuantumHostApiChooseDirectoryResponse* quantum_quantum_host_api_choose_directory_response_new(QuantumDirectoryResponse* return_value);

/**
 * quantum_quantum_host_api_choose_directory_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to QuantumHostApi.chooseDirectory.
 *
 * Returns: a new #QuantumQuantumHostApiChooseDirectoryResponse
 */
QuantumQuantumHostApiChooseDirectoryResponse* quantum_quantum_host_api_choose_directory_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse, quantum_quantum_host_api_start_accessing_security_scoped_resource_response, QUANTUM, QUANTUM_HOST_API_START_ACCESSING_SECURITY_SCOPED_RESOURCE_RESPONSE, GObject)

/**
 * quantum_quantum_host_api_start_accessing_security_scoped_resource_response_new:
 *
 * Creates a new response to QuantumHostApi.startAccessingSecurityScopedResource.
 *
 * Returns: a new #QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse
 */
QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* quantum_quantum_host_api_start_accessing_security_scoped_resource_response_new(const gchar* return_value);

/**
 * quantum_quantum_host_api_start_accessing_security_scoped_resource_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to QuantumHostApi.startAccessingSecurityScopedResource.
 *
 * Returns: a new #QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse
 */
QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* quantum_quantum_host_api_start_accessing_security_scoped_resource_response_new_error(const gchar* code, const gchar* message, FlValue* details);

G_DECLARE_FINAL_TYPE(QuantumQuantumHostApiAddResponse, quantum_quantum_host_api_add_response, QUANTUM, QUANTUM_HOST_API_ADD_RESPONSE, GObject)

/**
 * quantum_quantum_host_api_add_response_new:
 *
 * Creates a new response to QuantumHostApi.add.
 *
 * Returns: a new #QuantumQuantumHostApiAddResponse
 */
QuantumQuantumHostApiAddResponse* quantum_quantum_host_api_add_response_new(int64_t return_value);

/**
 * quantum_quantum_host_api_add_response_new_error:
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Creates a new error response to QuantumHostApi.add.
 *
 * Returns: a new #QuantumQuantumHostApiAddResponse
 */
QuantumQuantumHostApiAddResponse* quantum_quantum_host_api_add_response_new_error(const gchar* code, const gchar* message, FlValue* details);

/**
 * QuantumQuantumHostApiVTable:
 *
 * Table of functions exposed by QuantumHostApi to be implemented by the API provider.
 */
typedef struct {
  QuantumQuantumHostApiGetHostLanguageResponse* (*get_host_language)(gpointer user_data);
  QuantumQuantumHostApiChooseDirectoryResponse* (*choose_directory)(gpointer user_data);
  QuantumQuantumHostApiStartAccessingSecurityScopedResourceResponse* (*start_accessing_security_scoped_resource)(const gchar* bookmark_string, gpointer user_data);
  QuantumQuantumHostApiAddResponse* (*add)(int64_t a, int64_t b, gpointer user_data);
  void (*send_message)(const gchar* message, QuantumQuantumHostApiResponseHandle* response_handle, gpointer user_data);
} QuantumQuantumHostApiVTable;

/**
 * quantum_quantum_host_api_set_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 * @vtable: implementations of the methods in this API.
 * @user_data: (closure): user data to pass to the functions in @vtable.
 * @user_data_free_func: (allow-none): a function which gets called to free @user_data, or %NULL.
 *
 * Connects the method handlers in the QuantumHostApi API.
 */
void quantum_quantum_host_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const QuantumQuantumHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func);

/**
 * quantum_quantum_host_api_clear_method_handlers:
 *
 * @messenger: an #FlBinaryMessenger.
 * @suffix: (allow-none): a suffix to add to the API or %NULL for none.
 *
 * Clears the method handlers in the QuantumHostApi API.
 */
void quantum_quantum_host_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix);

/**
 * quantum_quantum_host_api_respond_send_message:
 * @response_handle: a #QuantumQuantumHostApiResponseHandle.
 * @return_value: location to write the value returned by this method.
 *
 * Responds to QuantumHostApi.sendMessage. 
 */
void quantum_quantum_host_api_respond_send_message(QuantumQuantumHostApiResponseHandle* response_handle, gboolean return_value);

/**
 * quantum_quantum_host_api_respond_error_send_message:
 * @response_handle: a #QuantumQuantumHostApiResponseHandle.
 * @code: error code.
 * @message: error message.
 * @details: (allow-none): error details or %NULL.
 *
 * Responds with an error to QuantumHostApi.sendMessage. 
 */
void quantum_quantum_host_api_respond_error_send_message(QuantumQuantumHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details);

G_END_DECLS

#endif  // PIGEON_MESSAGES_G_H_
